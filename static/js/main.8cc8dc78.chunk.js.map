{"version":3,"sources":["globalStyles.jsx","hooks/useLocalStorage.js","components/Section/Section.jsx","components/Buttons/Buttons.jsx","components/Statistic/Statistic.styled.jsx","components/Statistic/Statistic.jsx","components/FeedbackOptions/FeedbackOptions.jsx","components/Notification/Notification.jsx","App.jsx","index.js"],"names":["GlobalStyle","createGlobalStyle","useLocalStorage","key","defaultVal","useState","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","SectionStyled","styled","section","Section","title","children","Button","button","ButtonRefreshStyled","Thumb","div","Title","h2","Item","p","Statistic","handleRefresh","good","neutral","bad","total","positivePercentage","type","onClick","FeedbackOptions","options","map","option","name","prototype","PropTypes","number","isRequired","Notification","App","setGood","setNeutral","setBad","sumTotal","goodFeedback","Math","floor","e","target","prev","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8cc8dc78.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n  body {\r\n  box-sizing: border-box;\r\n  margin:0;\r\n  }\r\n\r\n    p,\r\n    h1,\r\n    h2,\r\n    h3 {\r\n  margin: 0;\r\n  padding: 0;\r\n    }\r\n\r\nul {\r\n  list-style: none;\r\n  padding: 0;\r\n  margin: 0;\r\n}\r\n`\r\n\r\nexport default GlobalStyle\r\n","import { useState, useEffect } from 'react'\r\nexport default function useLocalStorage(key, defaultVal) {\r\n  const [state, setState] = useState(() => {\r\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultVal\r\n  })\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(key, JSON.stringify(state))\r\n  }, [key, state])\r\n\r\n  return [state, setState]\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components'\r\n\r\nconst SectionStyled = styled.section`\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  gap: 30px;\r\n  padding: 100px;\r\n`\r\n\r\nexport default function Section({ title, children }) {\r\n  return (\r\n    <SectionStyled>\r\n      <h1>{title}</h1>\r\n      {children}\r\n    </SectionStyled>\r\n  )\r\n}\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string,\r\n  children: PropTypes.arrayOf(PropTypes.element),\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const Button = styled.button`\r\n  width: 100px;\r\n  height: 45px;\r\n  background-color: beige;\r\n\r\n  border-radius: 10px;\r\n  text-transform: uppercase;\r\n  font-weight: 400;\r\n\r\n  cursor: pointer;\r\n\r\n  &:not(:last-child) {\r\n    margin-right: 20px;\r\n  }\r\n`\r\nexport const ButtonRefreshStyled = styled(Button)`\r\n  align-self: center;\r\n  margin-top: 30px;\r\n`\r\n","import styled from 'styled-components'\r\n\r\nexport const Thumb = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: solid 1px black;\r\n  padding: 30px;\r\n  background-color: rgb(174, 215, 216);\r\n`\r\n\r\nexport const Title = styled.h2`\r\n  font-style: italic;\r\n  margin-bottom: 30px;\r\n`\r\n\r\nexport const Item = styled.p`\r\n  &::not(:last-child) {\r\n    margin-bottom: 20px;\r\n  }\r\n  span {\r\n    font-weight: 700;\r\n    font-size: 18px;\r\n  }\r\n`\r\n","import PropTypes from 'prop-types'\r\n\r\nimport { ButtonRefreshStyled } from '../Buttons'\r\nimport { Thumb, Title, Item } from './Statistic.styled'\r\n\r\nexport default function Statistic({ handleRefresh, good, neutral, bad, total, positivePercentage }) {\r\n  const handleRefreshClick = () => {\r\n    handleRefresh()\r\n  }\r\n\r\n  return (\r\n    <Thumb>\r\n      <Title>Statistics:</Title>\r\n      <div>\r\n        <Item>\r\n          <span>Good: </span> {good}\r\n        </Item>\r\n        <Item>\r\n          <span>Neutral: </span> {neutral}\r\n        </Item>\r\n        <Item>\r\n          <span>Bad: </span> {bad}\r\n        </Item>\r\n        <Item>\r\n          <span>Total: </span> {total}\r\n        </Item>\r\n        <Item>\r\n          <span>Positive Feedback: </span>\r\n          {positivePercentage}%\r\n        </Item>\r\n      </div>\r\n      <ButtonRefreshStyled type=\"button\" aria-label=\"Refresh stats\" onClick={handleRefreshClick}>\r\n        Refresh stats\r\n      </ButtonRefreshStyled>\r\n    </Thumb>\r\n  )\r\n}\r\n\r\nStatistic.prototype = {\r\n  good: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.number.isRequired,\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Button } from '../Buttons'\r\n\r\nexport default function FeedbackOptions({ options, onClick }) {\r\n  return (\r\n    <div>\r\n      {options.map(option => (\r\n        <Button key={option} type=\"button\" name={option} onClick={onClick}>\r\n          {option}\r\n        </Button>\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.arrayOf(PropTypes.string.isRequired),\r\n  leaveFeedback: PropTypes.func,\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport default Notification = styled.p`\r\n  font-style: italic;\r\n  color: brown;\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n`\r\n","import useLocalStorage from './hooks/useLocalStorage'\r\nimport Section from './components/Section'\r\nimport Statistic from './components/Statistic'\r\nimport FeedbackOptions from './components/FeedbackOptions'\r\nimport Notification from './components/Notification'\r\n\r\nfunction App() {\r\n  const [good, setGood] = useLocalStorage('good', 0)\r\n  const [neutral, setNeutral] = useLocalStorage('neutral', 0)\r\n  const [bad, setBad] = useLocalStorage('bad', 0)\r\n\r\n  const handleChange = e => {\r\n    switch (e.target.name) {\r\n      case 'good':\r\n        setGood(prev => prev + 1)\r\n        break\r\n\r\n      case 'neutral':\r\n        setNeutral(prev => prev + 1)\r\n        break\r\n\r\n      case 'bad':\r\n        setBad(prev => prev + 1)\r\n        break\r\n\r\n      default:\r\n        return\r\n    }\r\n  }\r\n\r\n  const handleRefresh = () => {\r\n    setGood(0)\r\n    setBad(0)\r\n    setNeutral(0)\r\n  }\r\n\r\n  const sumTotal = good + neutral + bad\r\n  const goodFeedback = Math.floor((100 * good) / sumTotal)\r\n\r\n  return (\r\n    <Section title=\"Please leave feedback\">\r\n      <FeedbackOptions options={['good', 'neutral', 'bad']} onClick={handleChange} />\r\n      {sumTotal > 0 ? (\r\n        <Statistic\r\n          handleRefresh={handleRefresh}\r\n          good={good}\r\n          neutral={neutral}\r\n          bad={bad}\r\n          total={sumTotal}\r\n          positivePercentage={goodFeedback}\r\n        />\r\n      ) : (\r\n        <Notification>No feedback given</Notification>\r\n      )}\r\n    </Section>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport GlobalStyle from './globalStyles'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <GlobalStyle />\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n)\r\n"],"sourceRoot":""}